name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop/disable

jobs:
  static-code-analysis:
    name: Static Code Analysis
    runs-on: windows-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Add .dotnet tools to PATH
        shell: powershell
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          [System.Environment]::SetEnvironmentVariable('PATH', $env:PATH, [System.EnvironmentVariableTarget]::Process)
      - name: Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        shell: powershell
        working-directory: ./backend
        run: |
          dotnet-sonarscanner begin /k:"VahPheephoopou2" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [static-code-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: |
          cd backend && cd HttpApi
          dotnet restore
      - name: Build the test project
        run: |
          cd backend && cd test
          dotnet build --no-restore
      - name: Start Web API
        env:
          DB_CON: ${{ secrets.DB_CON }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend && cd HttpApi
          dotnet run & echo "API_PID=$!" >> $GITHUB_ENV
          sleep 30
      - name: Run API tests
        run: |
          cd backend && cd test
          dotnet test --no-build
      - name: Shutdown Web API
        if: always()
        run: kill $API_PID
  
  build-and-push-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push httpapi image
        env:
          DB_CON: ${{ secrets.DB_CON }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend
          docker-compose build httpapi
          docker tag tomdra01/httpapi:latest tomdra01/httpapi:latest
          docker push tomdra01/httpapi:latest
      - name: Build and push wsapi image
        env:
          DB_CON: ${{ secrets.DB_CON }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend
          docker-compose build wsapi
          docker tag tomdra01/wsapi:latest tomdra01/wsapi:latest
          docker push tomdra01/wsapi:latest
      - name: Build and push frontend image
        env:
          DB_CON: ${{ secrets.DB_CON }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend
          docker-compose build frontend
          docker tag tomdra01/frontend:latest tomdra01/frontend:latest
          docker push tomdra01/frontend:latest

  trigger-update-and-deploy:
    needs: [build-and-push-docker-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Trigger update
        run: |
          curl --fail -X GET 'http://164.68.109.76:8090/v1/update' -H 'Authorization: Bearer authtoken'

      - name: Cooldown 10s
        run: sleep 10

  database-migration:
    needs: [trigger-update-and-deploy]
    name: Database Migration
    runs-on: ubuntu-latest
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_CON: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_USER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Run Flyway migrations
        run: |
          cd backend
          sleep 10
          docker-compose up flyway