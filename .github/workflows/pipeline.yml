name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  static-code-analysis:
    name: static-code-analysis
    runs-on: windows-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3  
        with:
          fetch-depth: 0  
      - name: Set up JDK 17
        uses: actions/setup-java@v3 
        with:
          distribution: 'temurin'  
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v3 
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3 
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Add .dotnet tools to PATH
        shell: powershell
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          [System.Environment]::SetEnvironmentVariable('PATH', $env:PATH, [System.EnvironmentVariableTarget]::Process)
      - name: Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        shell: powershell
        working-directory: ./backend  
        run: |
          dotnet-sonarscanner begin /k:"VahPheephoopou2" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          cd backend/httpapi
          dotnet restore httpapi.csproj

      - name: Build the test project
        run: |
          cd backend/test
          dotnet build --no-restore test.csproj

      - name: Start Web API
        run: |
          cd backend/httpapi
          sleep 30
          dotnet run & echo "API_PID=$!" >> $GITHUB_ENV

      - name: Run API tests
        run: |
          cd backend/test
          sleep 60
          dotnet test --no-build --filter FullyQualifiedName~test.api
        env:
          DB_CON: ${{ secrets.DB_CON }}

      - name: Shutdown Web API
        if: always()
        run: kill $API_PID