name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  static-code-analysis:
    name: Static Code Analysis
    runs-on: windows-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - uses: actions/cache@v3
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: dotnet tool install --global dotnet-sonarscanner
      - shell: powershell
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          [System.Environment]::SetEnvironmentVariable('PATH', $env:PATH, [System.EnvironmentVariableTarget]::Process)
      - name: Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        shell: powershell
        working-directory: ./backend
        run: |
          dotnet-sonarscanner begin /k:"VahPheephoopou2" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-
      - run: dotnet restore ./backend/HttpApi
      - run: dotnet build --no-restore ./backend/test
      - env:
          DB_CON: ${{ secrets.DB_CON }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          dotnet run --project ./backend/HttpApi &
          echo "API_PID=$!" >> $GITHUB_ENV
          sleep 30
      - run: dotnet test --no-build ./backend/test
      - if: always()
        run: kill $API_PID

  build-and-push-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [static-code-analysis, integration-tests]
    strategy:
      matrix:
        service: [ httpapi, wsapi, frontend ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service }} image
        env:
          DB_CON: ${{ secrets.DB_CON }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend
          docker-compose build ${{ matrix.service }}
          docker tag tomdra01/${{ matrix.service }}:staging tomdra01/${{ matrix.service }}:staging
          docker push tomdra01/${{ matrix.service }}:staging
  
  deploy-to-test-environment:
    name: Deploy to Test environment
    needs: [build-and-push-docker-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Trigger update
        run: |
          curl --fail -X GET 'http://164.68.109.76:8090/v1/update' -H 'Authorization: Bearer authtoken'

      - name: Cooldown 10s
        run: sleep 10

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-to-test-environment]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
      - run: |
          cd backend
          sleep 10
          docker-compose up flyway

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [database-migration]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'
      - run: npm install -g @angular/cli
      - run: npm install --prefix ./frontend
      - run: ng build --project ./frontend
      - run: npm install -g http-server
      - run: http-server ./frontend/dist/frontend -p 4200 &
      - run: npm install testcafe@latest
      - run: npx testcafe "chromium:headless --no-sandbox" "./frontend/test-cafe/angular-test.js"

  performance-tests:
    name: K6 Performance Tests
    runs-on: ubuntu-latest
    needs: [database-migration]
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
      - run: sudo wget -q -O - https://dl.k6.io/key.gpg | sudo apt-key add -
      - run: echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
      - run: sudo apt-get update && sudo apt-get install -y k6
      - run: k6 run ./frontend/k6/loadtest.js && sleep 3 && k6 run ./frontend/k6/soaktest.js && sleep 3 && k6 run ./frontend/k6/spiketest.js
