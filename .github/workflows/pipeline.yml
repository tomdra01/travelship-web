name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  static-code-analysis:
    name: Static Code Analysis
    runs-on: windows-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Add .dotnet tools to PATH
        shell: powershell
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          [System.Environment]::SetEnvironmentVariable('PATH', $env:PATH, [System.EnvironmentVariableTarget]::Process)
      - name: Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        shell: powershell
        working-directory: ./backend
        run: |
          dotnet-sonarscanner begin /k:"VahPheephoopou2" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [static-code-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: |
          cd backend && cd HttpApi
          dotnet restore
      - name: Build the test project
        run: |
          cd backend && cd test
          dotnet build --no-restore
      - name: Start Web API
        env:
          DB_CON: ${{ secrets.DB_CON }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          cd backend && cd HttpApi
          dotnet run & echo "API_PID=$!" >> $GITHUB_ENV
          sleep 30
      - name: Run API tests
        run: |
          cd backend && cd test
          dotnet test --no-build
      - name: Shutdown Web API
        if: always()
        run: kill $API_PID

  end-to-end-tests:
    name: End To End Tests
    runs-on: windows-latest
    needs: [ integration-tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17.x'
      - name: Install dependencies
        run: cd frontend && npm install
      - name: Start Angular Development Server
        run: |
          cd frontend
          npm install -g @angular/cli
          ng serve --host 0.0.0.0 --disable-host-check &
          echo "NG_PID=$!" >> $GITHUB_ENV
          sleep 60
      - name: Run TestCafe tests
        run: cd frontend/test-cafe && npx testcafe chrome angular-test.js
      - name: Shutdown Angular Development Server
        if: always()
        run: kill $NG_PID

  deploy-to-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [ integration-tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build HTTP API Docker Image
        run: |
          docker build -t travelship-httpapi-test:latest -f backend/HttpApi/Dockerfile .

      - name: Build WebSocket API Docker Image
        run: |
          docker build -t travelship-wsapi-test:latest -f backend/WsApi/Dockerfile .

      - name: Build Frontend Docker Image
        run: |
          docker build -t travelship-frontend-test:latest -f frontend/Dockerfile .

      - name: Push HTTP API Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag travelship-httpapi-test:latest myrepo/travelship-httpapi-test:latest
          docker push myrepo/travelship-httpapi-test:latest

      - name: Push WebSocket API Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag travelship-wsapi-test:latest myrepo/travelship-wsapi-test:latest
          docker push myrepo/travelship-wsapi-test:latest

      - name: Push Frontend Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag travelship-frontend-test:latest myrepo/travelship-frontend-test:latest
          docker push myrepo/travelship-frontend-test:latest

      - name: Deploy with Watchtower
        run: |
          docker run -d \
            --name watchtower \
            -e WATCHTOWER_CLEANUP=true \
            -e WATCHTOWER_POLL_INTERVAL=30 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            containrrr/watchtower myrepo/travelship-httpapi-test:latest myrepo/travelship-wsapi-test:latest myrepo/travelship-frontend-test:latest
  
